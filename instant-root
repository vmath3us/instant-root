#!/bin/bash
list_dir=("bin" "boot" "etc" "lib" "lib64" "opt" "root" "sbin" "srv" "usr" "var" "mnt")
chroot_system_dirs=("proc" "sys" "dev" "run" "tmp")
instant_root_dir="/var/cache/instant-root"  #### need real file system, not overlayfs
user_shell=$SHELL
user_chroot=$(whoami)
mode="systemd" ################################## suported simple, systemd (using nspawn), and podman (rootless)
select_mode(){
    if [ $mode == "simple" ] || [ $mode == "systemd" ] ; then
        support_dir
    elif [ $mode == "podman" ] ; then
        podman container exists instant-root
            if [ $? -ne 0 ] ; then
                 podman_generate_command
            else
                generate_vars
            fi

    else
        printf "not defined mode, exiting"
        exit 1
    fi
}
podman_generate_command(){
    podman_command="podman create --hostname instant-root-$HOST --ipc host --name instant-root --network host --privileged --security-opt label=disable --user root:root --pid host --label 'manager=instant-root' --volume /run/user/$(id -u):/run/user/$(id -u):rslave --entrypoint 'su -c $user_shell $HOME/.podman-entrypoint-instant-root $user_chroot'"
    for i in ${list_dirs[@]} ; do
        podman_command="${podman_command} --volume ${i}:${i}:ro"
    done
    for i in ${chroot_system_dirs[@]} ; do
        if [ $i != "proc" ] || [ $i != "run" ] ; then
        podman_command="${podman_command} --volume ${i}:${i}:rslave"
        fi
    done
    podman_command="${podman_commmand} --volume $HOME:$HOME:rslave"
}
support_dir(){
    moment=$(date +%Y-%m-%d--%H-%M-%S)
    operation_dir="$instant_root_dir/$moment"
    chroot_dir="$operation_dir/chroot"
    sudo mkdir -p $chroot_dir
    overlay_create_and_mount
}
overlay_create_and_mount(){
printf "                criando overlays...                               \n"
        for i in ${list_dir[@]} ; do
         sudo mkdir -p $operation_dir/overlay/work-$i
         sudo mkdir -p $operation_dir/overlay/upper-$i
         sudo mkdir -p $chroot_dir/$i
         sudo mount  -t overlay overlay -o lowerdir=/$i,upperdir=$operation_dir/overlay/upper-$i,workdir=$operation_dir/overlay/work-$i $chroot_dir/$i
        done
chroot_mounts
}
chroot_mounts(){
printf "                montando pastas de processos...       \n"
    if [ $mode == "simple" ]; then
        for i in ${chroot_system_dirs[@]} ; do
               sudo mkdir  -p $chroot_dir/$i
            if [ $i != "tmp" ] ;then
                sudo mount --rbind /$i $chroot_dir/$i
               sudo mount --make-rslave $chroot_dir/$i
            else
                sudo mount --types "$i"fs /$i $chroot_dir/$i
               sudo mount --make-rslave $chroot_dir/$i
            fi
        done
        home_setup
    else
        home_setup
    fi
}
home_setup(){
printf "                montando home...       \n"
 sudo mkdir -p $chroot_dir/home
 sudo mount --rbind /home $chroot_dir/home
 sudo mount --make-rslave $chroot_dir/home
    generate_vars
}
generate_vars(){
printf "                exportando variáveis de usuário...       \n"
    if [ $mode == "simple" ] || [ $mode == "podman" ]; then
    echo 'printf "%s:" "user" | sudo chpasswd -e ; printf "%s:" "root" | sudo chpasswd -e' >> /tmp/entrypoint-instant-root-$moment
        while read -r env_list; do
            printf "export \"${env_list}\"\n" >> /tmp/entrypoint-instant-root-$moment
        done < <(printenv)
        chroot_switch
    elif [ $mode == "systemd" ] ; then
        chroot_switch
    fi
}
chroot_switch(){
    if [ $mode == "simple" ] ; then
        chroot_setup
    elif [ $mode == "systemd" ] ; then
        systemd_setup
    elif [ $mode == "podman" ] ; then
        podman_setup
    fi
}
chroot_setup(){
printf 'cd $PWD' >> /tmp/entrypoint-instant-root-$moment
printf "\nexec $user_shell%s\n" >> /tmp/entrypoint-instant-root-$moment
printf "        chroot em $chroot_dir                 \n"
printf "###########################################################\n"
printf "    Atenção: $user_chroot e root não possuem senha aqui    \n"
printf "###########################################################\n"
sudo mv /tmp/entrypoint-instant-root-$moment $chroot_dir/tmp/entrypoint-instant-root
    sudo chroot $chroot_dir su -c "$user_shell /tmp/entrypoint-instant-root" $user_chroot ##### zero password to root and user; thanks 89luca89
    printf "###########################################################\n"
printf "        desmontando chroot              \n"
printf "###########################################################\n"
    sudo umount -R $chroot_dir/* 2> /dev/null
}
systemd_setup(){
    sudo mkdir -p $chroot_dir/etc/systemd/system/console-getty.service.d/
    sudo printf "[Service]\nExecStart=\nExecStart=-/sbin/agetty -o '-p -f -- \\\u' --noclear --keep-baud --autologin $user_chroot - 115200,38400,9600 \$TERM\n" >> $chroot_dir/etc/systemd/system/console-getty.service.d/autologin.conf
    sudo systemd-nspawn -D $chroot_dir -b
    sudo umount -R $chroot_dir/* 2> /dev/null
}
podman_setup(){
    mv /tmp/entrypoint-instant-root-$moment $HOME/.podman-entrypoint-instant-root
}
#######################################################################################
#
#
#######################################################################################
validate_dir(){
    if [ -d $directory/overlay ] && [ -d $directory/chroot ] ; then
        operation_dir=$directory
        chroot_dir="$directory/chroot"
        overlay_create_and_mount
    else
        printf "$directory nunca usado antes, saindo%s\n"
        exit 1
    fi
}
printf "###########################################################\n"
printf "                Instant Root                               \n"
printf "###########################################################\n"



if [ $user_chroot == "root" ] ; then
    printf "execute com seu usuário%s\n"
    exit 1
fi
###########################################################
if [ -z $1 ] ; then support_dir ; fi
###########################################################
if [ "$1" == '-d' ] ; then

    if [  -z $2 ] ; then
        directory=$(pwd)
        validate_dir
    else
        directory=$2
        validate_dir
    fi

elif [ "$1" == '.' ] ; then
    directory=$(pwd)
    validate_dir
fi
