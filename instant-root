#!/bin/bash
list_dir=("bin" "boot" "etc" "lib" "lib64" "opt" "root" "sbin" "srv" "usr" "var" "mnt")
chroot_system_dirs=("proc" "sys" "tmp" "dev" "run")
instant_root_dir="/var/cache/instant-root"  #### need real file system, not overlayfs
user_shell=$SHELL
user_chroot=$(whoami)
systemd="0"
support_dir(){
    moment=$(date +%Y-%m-%d--%H-%M-%S)
    operation_dir="$instant_root_dir/$moment"
    chroot_dir="$operation_dir/chroot"
    sudo mkdir -p $chroot_dir
    overlay_create_and_mount
}
overlay_create_and_mount(){
printf "                criando overlays...                               \n"
        for i in ${list_dir[@]} ; do
         sudo mkdir -p $operation_dir/overlay/work-$i
         sudo mkdir -p $operation_dir/overlay/upper-$i
         sudo mkdir -p $chroot_dir/$i
         sudo mount  -t overlay overlay -o lowerdir=/$i,upperdir=$operation_dir/overlay/upper-$i,workdir=$operation_dir/overlay/work-$i $chroot_dir/$i
        done
chroot_mounts
}
chroot_mounts(){
printf "                montando pastas de processos...       \n"
    if [ $systemd == "0" ] ; then
        for i in ${chroot_system_dirs[@]} ; do
               sudo mkdir $chroot_dir/$i
            if [ $i != "tmp" ] ;then
                sudo mount --rbind /$i $chroot_dir/$i
               sudo mount --make-rslave $chroot_dir/$i
            else
                sudo mount --types "$i"fs /$i $chroot_dir/$i
            fi
        done
        home_setup
    else
        home_setup
    fi
}
home_setup(){
printf "                montando home...       \n"
 sudo mkdir -p $chroot_dir/home
 sudo mount --rbind /home $chroot_dir/home
 sudo mount --make-rslave $chroot_dir/home
    generate_vars
}
generate_vars(){
printf "                exportando variáveis de usuário...       \n"
    if [ $systemd == "0" ] ; then
         while read -r env_list; do
             env_on_chroot="${env_on_chroot} \"${env_list}\""
         done < <(printenv)
        chroot_switch
    else
        chroot_switch
    fi
}
chroot_switch(){
    if [ $systemd == "0" ] ; then
    chroot_setup
       else
    systemd_setup
    fi
}
chroot_setup(){
printf "        chroot em   $chroot_dir                 \n"
printf "###########################################################\n"
    sudo chroot $chroot_dir su -c "cd /home/$user_chroot; /usr/bin/env ${env_on_chroot} $user_shell" $user_chroot
printf "###########################################################\n"
printf "        desmontando chroot              \n"
    sudo umount -R $chroot_dir/* 2> /dev/null
}
systemd_setup(){
    sudo mkdir -p $chroot_dir/etc/systemd/system/console-getty.service.d/
    sudo printf "[Service]\nExecStart=\nExecStart=-/sbin/agetty -o '-p -f -- \\\u' --noclear --keep-baud --autologin $user_chroot - 115200,38400,9600 \$TERM\n" $chroot_dir/etc/systemd/system/console-getty.service.d/autologin.conf
    sudo systemd-nspawn -D $chroot_dir -b
    sudo umount -R $chroot_dir/* 2> /dev/null
}
#######################################################################################
#
#
#######################################################################################
validate_dir(){
    if [ -d $directory/overlay ] && [ -d $directory/chroot ] ; then
        operation_dir=$directory
        chroot_dir="$directory/chroot"
        overlay_create_and_mount
    else
        printf "$directory nunca usado antes, saindo%s\n"
        exit 1
    fi
}
printf "###########################################################\n"
printf "                Instant Root                               \n"
printf "###########################################################\n"



if [ $user_chroot == "root" ] ; then
    printf "execute com seu usuário%s\n"
    exit 1
fi
###########################################################
if [ -z $1 ] ; then support_dir ; fi
###########################################################
if [ "$1" == '-d' ] ; then

    if [  -z $2 ] ; then
        directory=$(pwd)
        validate_dir
    else
        directory=$2
        validate_dir
    fi

elif [ "$1" == '.' ] ; then
    directory=$(pwd)
    validate_dir
fi
